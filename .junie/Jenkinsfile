pipeline {
    // The agent defines the machine/environment
    agent {
        // `label`: Use a specific node or label assigned to a Jenkins agent in your setup
        label 'build-node'
    }
    environment {
        // Environment variables to configure parameters
        GRADLE_OPTS = "-Dorg.gradle.daemon=false"
        DOCKER_IMAGE = "my-app-image:latest"
        REGISTRY = "your-docker-registry.com"
    }
    stages {
        stage('Checkout Code') {
            steps {
                // Checkout the project repository
                checkout scm
            }
        }
        stage('Gradle Build') {
            steps {
                // Run Gradle build, assuming a `build.gradle` or `settings.gradle` in the repo
                sh './gradlew clean build'
            }
        }
        stage('Run Tests') {
            steps {
                // Run tests with Gradle
                sh './gradlew test'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image using Docker CLI
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    // Push the image to Docker registry
                    sh "docker tag ${DOCKER_IMAGE} ${REGISTRY}/${DOCKER_IMAGE}"
                    sh "docker push ${REGISTRY}/${DOCKER_IMAGE}"
                }
            }
        }
    }
    post {
        // Define post-build actions
        success {
            echo 'Build and Deployment Successful!'
        }
        failure {
            echo 'Build Failed!'
        }
    }
}